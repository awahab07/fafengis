/** * The GeoExt.panel.Map used in the application.  Useful to define map options * and stuff. * @extends GeoExt.panel.Map */Ext.define('DCG.view.querymap.QueryMapPanel', {    // Ext.panel.Panel-specific options:    extend: 'GeoExt.panel.Map',    alias : 'widget.dcg_query_map_panel',    requires: [        'Ext.window.Window',        'GeoExt.Action',	'Ext.layout.VBoxLayout'    ],    border: 'false',    layout: 'fit',    width: 800,    height: 500,    // GeoExt.panel.Map-specific options :    center: '31.222197,71.40747',    zoom: 7,    initComponent: function() {	console.log('iniComponent of QueryMapPanel');        var controller = this;        controller.toolbarItems = [];        controller.map = new OpenLayers.Map();	controller.map.setOptions({restrictedExtent: new OpenLayers.Bounds(6776974.417305551, 2716247.7922399966,8828454.039573975, 4451578.67963478)}); //Restrict Map Extent to Pakistan Boundary        // ZoomToMaxExtent control, a "button" control        controller.toolbarItems.push(Ext.create('Ext.button.Button', Ext.create('GeoExt.Action', {            control: new OpenLayers.Control.ZoomToMaxExtent(),            map: controller.map,            text: "<O>",            tooltip: "Zoom the map to focus maximum"        })));        controller.toolbarItems.push("-");        // Navigation control        controller.toolbarItems.push(Ext.create('Ext.button.Button',Ext.create('GeoExt.Action', {            text: "^",            control: new OpenLayers.Control.Navigation(),            map: controller.map,            // button options            toggleGroup: "draw",            allowDepress: false,            pressed: true,            tooltip: "Enable map navigation",            // check item options            group: "draw",            checked: true        })));        controller.toolbarItems.push("-");        // Navigation history - two "button" controls        controller.mapNavigationControl = new OpenLayers.Control.NavigationHistory();        controller.map.addControl(controller.mapNavigationControl);                controller.toolbarItems.push(Ext.create('Ext.button.Button', Ext.create('GeoExt.Action', {            text: "<",            control: controller.mapNavigationControl.previous,            disabled: true,            tooltip: "Navigate back to previous location"        })));                controller.toolbarItems.push(Ext.create('Ext.button.Button', Ext.create('GeoExt.Action', {            text: ">",            control: controller.mapNavigationControl.next,            disabled: true,            tooltip: "Navigate forward to next location"        })));		controller.map.legendPanel = Ext.create('GeoExt.panel.Legend', {            defaults: {                labelCls: 'mylabel',                style: 'padding:5px'            },	    layout: 'fit',            bodyStyle: 'padding:5px',            width: 350,            autoScroll: true,        });		        Ext.apply(me, {            map: controller.map,            dockedItems: [{                xtype: 'toolbar',                dock: 'top',		height: 30,                items: controller.toolbarItems,                style: {                    border: 0,                    padding: 0                }            }]        });        	controller.layerSwitcher = new OpenLayers.Control.LayerSwitcher();	controller.layerSwitcher.ascending = false;	controller.layerSwitcher.useLegendGraphics = true;	controller.map.addControl(controller.layerSwitcher);	controller.callParent(arguments);    }});