from django.core.management.base import BaseCommand, CommandError
from django.db import models
from map.models import District, Constituency, DistrictConstituency
from django.core.exceptions import ObjectDoesNotExist

class Command(BaseCommand):
    """
     This command will be used to adjust District-Constituency Many-to-Many relationships.
     This command will create a instances of model 'DistrictConstituency' of fields id, district_id, constituency_id.
     When districts, constituencies shapefile datasources are imported into PostGIS, they contain relationships in form of
        slash(/) separated ids. This command will populate the PostgreSQL table district_constituency (Generated by syncing model
        DistrictConstituency) to allow the Many to Many model DistrictConstituency successfylly populated.  
    """
    args = ''
    help = 'Creates district_constituency table in configured database of columns id, district_id, consituency_id'

    def handle(self, *args, **options):
        districts = District.objects.all()
        constituencies = Constituency.objects.all()
        
        # Establish relationship of constituencies contained within districts
        for district in districts:
            district_id = district.id

            if district_id > 0:
                constituency_ids = district.constituency_ids.split("/")
                for constituency_id in constituency_ids:
                    constituency_id = constituency_id
                    if constituency_id and constituency_id != '0':
                        #self.stdout.write("constituency_id=" + repr(constituency_id))
                        # Retrieving / Create District Constituency Object if exists
                        dcobj, created = DistrictConstituency.objects.get_or_create(district_id=district_id, constituency_id=constituency_id)
                        if created:
                            self.stdout.write("Created: DistrictConstituency Object Created district_id=%s, constituency_id=%s" % (district_id, constituency_id))
                        else:
                            self.stdout.write("Duplicate: DistrictConstituency Object found district_id=%s, constituency_id=%s" % (district_id, constituency_id))

        # Establish relationship of districts contained within constituencies
        for constituency in constituencies:
            constituency_id = constituency.id

            if constituency_id != '':
                district_ids = constituency.district_ids.split("/")
                for district_id in district_ids:
                    if district_id != '':
                        district_id = int(district_id)
                        if district_id > 0:
                            # Retrieving / Create District Constituency Object if exists
                            dcobj, created = DistrictConstituency.objects.get_or_create(district_id=district_id, constituency_id=constituency_id)
                            if created:
                                self.stdout.write("Created: DistrictConstituency Object Created district_id=%s, constituency_id=%s" % (district_id, constituency_id))
                            else:
                                self.stdout.write("Duplicate: DistrictConstituency Object Found district_id=%s, constituency_id=%s" % (district_id, constituency_id))
                     
            